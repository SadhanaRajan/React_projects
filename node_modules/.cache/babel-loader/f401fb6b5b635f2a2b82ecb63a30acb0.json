{"ast":null,"code":"var _jsxFileName = \"/Users/sadhana/React_projects/src/components/Tesla/TablePagination.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport mock from '../../data/MOCK_DATA.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst USERS_URL = 'https://example.com/api/users';\nexport default function TablePagination() {\n  _s();\n\n  // const pageSize = 10; //Assumption made in this problem\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n  const [pageNumber, setPageNumber] = useState(0);\n  const [totalPageCount, setTotalPageCount] = useState(null);\n  const [canPrevious, setCanPrevious] = useState(false);\n  const [canNext, setCanNext] = useState(true);\n  /**\n   * Get number of pages from total records\n   * Example: for 33 records, there will be 4 pages\n   * pageSize is 10 ; Assumption made in this problem\n   */\n\n  const calculateTotalPages = (totalRecords, pageSize = 10) => {\n    return Math.ceil(totalRecords / pageSize);\n  }; //fetch data when component mounts, and when pageNumber state changes\n\n\n  useEffect(() => {\n    /**\n     * Interview test Code\n     */\n    // fetch( USERS_URL + '?page=' + pageNumber )\n    // \t.then( res => res.json() )\n    // \t.then(\n    // \t\t( response ) => {\n    // \t\t\tsetButtons( response.count );\n    // \t\t\tsetIsLoaded( true );\n    // \t\t\tsetTotalPageCount( calculateTotalPages( response.count ) );\n    // \t\t\tsetItems( response.results );\n    // \t\t} );\n\n    /**\n     * mock code (API wont work; CORS)\n     */\n    console.log(mock);\n    setButtons(mock.length);\n    setIsLoaded(true);\n    setTotalPageCount(calculateTotalPages(mock.length));\n    setItems(mock.slice(pageNumber * 10, pageNumber * 10 + 10));\n  }, [pageNumber]);\n  /**\n   * set the disabled state for all 4 buttons\n   */\n\n  const setButtons = (totalRecords, pageSize = 10) => {\n    //if all records can fit in 1 page, or zero records\n    if (totalRecords <= pageSize) {\n      setCanPrevious(false);\n      setCanNext(false);\n    } else {\n      //if first page, disable first and prev buttons\n      setCanPrevious(pageNumber !== 0); // if last page, disable next and last buttons\n\n      setCanNext(pageNumber !== totalPageCount - 1);\n    }\n  };\n\n  const handleFirst = () => {\n    setIsLoaded(false);\n    setPageNumber(0);\n  };\n\n  const handlePrevious = () => {\n    setIsLoaded(false);\n    setPageNumber(pageNumber - 1);\n  };\n\n  const handleNext = () => {\n    setIsLoaded(false);\n    setPageNumber(pageNumber + 1);\n  };\n\n  const handleLast = () => {\n    setIsLoaded(false);\n    setPageNumber(totalPageCount - 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"First Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Last Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: items.map(item => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.first_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.last_name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 9\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 8\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"pagination\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"first-page-btn\",\n        disabled: !isLoaded || !canPrevious,\n        onClick: handleFirst,\n        children: \"first\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"previous-page-btn\",\n        disabled: !isLoaded || !canPrevious,\n        onClick: handlePrevious,\n        children: \"previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"next-page-btn\",\n        disabled: !isLoaded || !canNext,\n        onClick: handleNext,\n        children: \"next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"last-page-btn\",\n        disabled: !isLoaded || !canNext,\n        onClick: handleLast,\n        children: \"last\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 4\n    }, this), pageNumber + 1, \" of \", totalPageCount]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 3\n  }, this);\n}\n\n_s(TablePagination, \"Pd1jmOGTY8vV2/qTSEMLtPmxGhY=\");\n\n_c = TablePagination;\n\nvar _c;\n\n$RefreshReg$(_c, \"TablePagination\");","map":{"version":3,"sources":["/Users/sadhana/React_projects/src/components/Tesla/TablePagination.jsx"],"names":["React","useState","useEffect","mock","USERS_URL","TablePagination","isLoaded","setIsLoaded","items","setItems","pageNumber","setPageNumber","totalPageCount","setTotalPageCount","canPrevious","setCanPrevious","canNext","setCanNext","calculateTotalPages","totalRecords","pageSize","Math","ceil","console","log","setButtons","length","slice","handleFirst","handlePrevious","handleNext","handleLast","map","item","id","first_name","last_name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport mock from '../../data/MOCK_DATA.json'\n\nconst USERS_URL = 'https://example.com/api/users';\n\nexport default function TablePagination () {\n\n\t// const pageSize = 10; //Assumption made in this problem\n\tconst [ isLoaded, setIsLoaded ] = useState( false );\n\tconst [ items, setItems ] = useState( [] );\n\tconst [ pageNumber, setPageNumber ] = useState( 0 );\n\tconst [ totalPageCount, setTotalPageCount ] = useState( null );\n\tconst [ canPrevious, setCanPrevious ] = useState( false );\n\tconst [ canNext, setCanNext ] = useState( true );\n\n\t/**\n\t * Get number of pages from total records\n\t * Example: for 33 records, there will be 4 pages\n\t * pageSize is 10 ; Assumption made in this problem\n\t */\n\tconst calculateTotalPages = ( totalRecords, pageSize = 10 ) => {\n\t\treturn Math.ceil( totalRecords / pageSize );\n\t}\n\n\n\t//fetch data when component mounts, and when pageNumber state changes\n\tuseEffect( () => {\n\t\t/**\n\t\t * Interview test Code\n\t\t */\n\t\t// fetch( USERS_URL + '?page=' + pageNumber )\n\t\t// \t.then( res => res.json() )\n\t\t// \t.then(\n\t\t// \t\t( response ) => {\n\t\t// \t\t\tsetButtons( response.count );\n\t\t// \t\t\tsetIsLoaded( true );\n\t\t// \t\t\tsetTotalPageCount( calculateTotalPages( response.count ) );\n\t\t// \t\t\tsetItems( response.results );\n\t\t// \t\t} );\n\n\n\t\t/**\n\t\t * mock code (API wont work; CORS)\n\t\t */\n\t\tconsole.log( mock )\n\t\tsetButtons( mock.length );\n\t\tsetIsLoaded( true );\n\t\tsetTotalPageCount( calculateTotalPages( mock.length ) );\n\t\tsetItems( mock.slice( pageNumber * 10, ( pageNumber * 10 ) + 10 ) );\n\t}, [ pageNumber ] );\n\n\t/**\n\t * set the disabled state for all 4 buttons\n\t */\n\tconst setButtons = ( totalRecords, pageSize = 10 ) => {\n\t\t//if all records can fit in 1 page, or zero records\n\t\tif ( totalRecords <= pageSize ) {\n\t\t\tsetCanPrevious( false );\n\t\t\tsetCanNext( false );\n\t\t} else {\n\t\t\t//if first page, disable first and prev buttons\n\t\t\tsetCanPrevious( pageNumber !== 0 );\n\n\t\t\t// if last page, disable next and last buttons\n\t\t\tsetCanNext( pageNumber !== totalPageCount - 1 );\n\t\t}\n\t}\n\n\tconst handleFirst = () => {\n\t\tsetIsLoaded( false );\n\t\tsetPageNumber( 0 );\n\n\t};\n\tconst handlePrevious = () => {\n\t\tsetIsLoaded( false );\n\t\tsetPageNumber( pageNumber - 1 );\n\n\t};\n\tconst handleNext = () => {\n\t\tsetIsLoaded( false );\n\t\tsetPageNumber( pageNumber + 1 );\n\n\t};\n\tconst handleLast = () => {\n\t\tsetIsLoaded( false );\n\t\tsetPageNumber( totalPageCount - 1 );\n\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<table className=\"table\">\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>ID</th>\n\t\t\t\t\t\t<th>First Name</th>\n\t\t\t\t\t\t<th>Last Name</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{ items.map( item => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<tr key={ item.id }>\n\t\t\t\t\t\t\t\t<td>{ item.id }</td>\n\t\t\t\t\t\t\t\t<td>{ item.first_name }</td>\n\t\t\t\t\t\t\t\t<td>{ item.last_name }</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t)\n\t\t\t\t\t} ) }\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t<section className=\"pagination\">\n\t\t\t\t<button className=\"first-page-btn\" disabled={ !isLoaded || !canPrevious }\n\t\t\t\t\tonClick={ handleFirst }>first</button>\n\t\t\t\t<button className=\"previous-page-btn\" disabled={ !isLoaded || !canPrevious }\n\t\t\t\t\tonClick={ handlePrevious }>previous</button>\n\t\t\t\t<button className=\"next-page-btn\" disabled={ !isLoaded || !canNext }\n\t\t\t\t\tonClick={ handleNext }>next</button>\n\t\t\t\t<button className=\"last-page-btn\" disabled={ !isLoaded || !canNext }\n\t\t\t\t\tonClick={ handleLast }>last</button>\n\t\t\t</section>\n\t\t\t{ pageNumber + 1 } of { totalPageCount }\n\t\t</div>\n\t);\n\n}\n"]},"metadata":{},"sourceType":"module"}